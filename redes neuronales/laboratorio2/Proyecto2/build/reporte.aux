\relax 
\catcode `"\active 
\catcode `<\active 
\catcode `>\active 
\@nameuse{es@quoting}
\babel@aux{spanish}{}
\@writefile{toc}{\contentsline {section}{\numberline {1} Introducci\'on a redes multicapa }{2}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {1.1}Compuertas Logicas}{2}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {1}{\ignorespaces Compuertas And, Or ,Not.}}{2}\protected@file@percent }
\newlabel{fig:Compuertas}{{1}{2}}
\@writefile{lof}{\contentsline {figure}{\numberline {2}{\ignorespaces Tablas de verdad.}}{2}\protected@file@percent }
\newlabel{fig:tablas}{{2}{2}}
\@writefile{toc}{\contentsline {paragraph}{Cada compuerta tiene su tabla de verdad , la cual indica cuando habra voltaje y cuando no, siendo 1 voltaje y 0 sin voltaje, ver Fig:\ref  {fig:tablas}}{2}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {1.2}El perceptron}{2}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {3}{\ignorespaces Representaci\'on de un perceptr\'on.}}{2}\protected@file@percent }
\newlabel{fig:Rperceptron}{{3}{2}}
\@writefile{toc}{\contentsline {paragraph}{Para aplicar el perceptr\'on es necesario determinar los vectores de W, un perceptr\'on recibe dos entradas y un vector w para as\'i obtener una salida, se puede ver la representaci\'on de un perceptr\'on a continuaci\'on. Fig: \ref  {fig:Rperceptron} }{2}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{El algoritmo que ocupa el perceptr\'on es muy simple ya que se compone de dos for y un if y su respectivo else, se multiplica el vector W por el vector X, para poder multiplicarlos se necesita sacar la transpuesta de W, y despu\'es simplemente se compara el resultado, si el resultado es mayor que 0 se le asigna el valor de 1 a $"y"$ y si es menor se le asigna un 0.}{3}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {2}Desarrollo}{3}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {4}{\ignorespaces Creacion de datos de prueba.}}{3}\protected@file@percent }
\newlabel{fig:and}{{4}{3}}
\@writefile{toc}{\contentsline {paragraph}{Se uso el mismo algoritmo del perceptr\'on, solo se crearon un conjunto de datos por medio de np.ramdom.uniform, para ello se dio un rango de n\'umeros a generar de 0 a 0.3 y de 0.7 a 1, los datos quedan ordenados de la manera que quedaban en el anterior ejercicio. Fig: \ref  {fig:and}}{3}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{El algoritmo entrenara al perceptr\'on para que de como resultados sus tablas de verdad}{3}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Este mismo procedimiento se tiene que realizar para cada compuerta excepto en el caso de la compuerta not ya que en esa compuerta una entrada siempre ser\'a 0 para que simplemente se niegue.}{3}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {3}Conclusion}{3}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{En conclusi\'on fue un gran avance lograr utilizar m\~A\IeC {\textordmasculine }ltiples neuronas para solucionar un problema como el de la xor, abriendo paso a un gran avance tecnol\'ogico, es necesario aprender a unir m\'ultiples neuronas para comprender el funcionamiento de estas, hoy en d\'ia existen m\'ultiples programas que pueden hacer esto de manera muy r\'apida pero siempre es importante comprender el funcionamiento de lo que hay detr\'as , para lograr innovar, al fin del d\'ia eso es lo que hace al ingeniero.}{3}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Tengo que destacar que este tema se me complico m\'as de lo que pensaba por la falta de tiempo, y talvez comprensi\'on a la hora de utilizar las compuertas , la manera en c\'omo funcionan las entradas de ellas y los datos a utilizar para el testing y entrenamiento.}{3}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {4}Referencias}{4}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Fern\'andez, J. L. (2003). L\'ogica Computacional. En \'A. M. Riesco. UNED.}{4}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{VEGA, J. L. (2012). L\'ogica Computacional. Estado de M\'exico: Red Tercer Milenio.}{4}\protected@file@percent }
